// Generated by row_row_row tool
// Auto-generated file. Do not modify.
import 'package:supabase_flutter/supabase_flutter.dart';
class ArticleKeywordRow {
  static const table = 'article_keyword';

  static const field = (
    keywordId: 'keyword_id',
    articleId: 'article_id',
  );

  final int keywordId;
  final int articleId;

  const ArticleKeywordRow({
    required this.keywordId,
    required this.articleId,
  });

  factory ArticleKeywordRow.fromJson(Map<String, dynamic> json) {
    return ArticleKeywordRow(
      keywordId: (json[field.keywordId] as num).toInt(),
      articleId: (json[field.articleId] as num).toInt(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      field.keywordId: keywordId,
      field.articleId: articleId,
    };
  }

  ArticleKeywordRow copyWith({
    int? keywordId,
    int? articleId,
  }) {
    return ArticleKeywordRow(
      keywordId: keywordId ?? this.keywordId,
      articleId: articleId ?? this.articleId,
    );
  }

  /// Creates a new row in the database.
  /// 
  /// Only non-null fields will be included in the insert payload.
  /// Primary keys and auto-generated fields can be set manually or left null for database defaults.
  /// Returns the created row with any auto-generated values.
  /// 
  /// Requires [supabase_flutter] package to be installed and initialized.
  /// Fetches a single row from the database by its primary key.
  /// 
  /// Returns the row if found, or throws an error if not found.
  /// 
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<ArticleKeywordRow> create({
    int? keywordId,
    int? articleId,
  }) async {
    // Build the insert payload with only non-null fields using collection if
    final Map<String, dynamic> insertPayload = {
      if (keywordId != null) field.keywordId: keywordId,
      if (articleId != null) field.articleId: articleId,
    };

    final response = await Supabase.instance.client
        .from(table)
        .insert(insertPayload)
        .select()
        .single();
    return ArticleKeywordRow.fromJson(response);
  }

  /// Fetches a single row from the database by its primary key.
  /// 
  /// Returns the row if found, or throws an error if not found.
  /// 
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<ArticleKeywordRow> getFromKeywordIdArticleId(int keywordId, int articleId) async {
    final response = await Supabase.instance.client
        .from(table)
        .select()
        .eq(field.keywordId, keywordId)
        .eq(field.articleId, articleId)
        .single();
    return ArticleKeywordRow.fromJson(response);
  }
}
