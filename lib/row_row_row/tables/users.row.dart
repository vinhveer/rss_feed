// Generated by row_row_row tool
// Auto-generated file. Do not modify.
import 'package:supabase_flutter/supabase_flutter.dart';

class UsersRow {
  static const table = 'users';

  static const field = (
    userId: 'user_id',
    fullName: 'full_name',
    avatarUrl: 'avatar_url',
    createdAt: 'created_at',
    themeMode: 'theme_mode',
    themeColor: 'theme_color',
  );

  final String userId;
  final String? fullName;
  final String? avatarUrl;
  final DateTime? createdAt;
  final dynamic themeMode;
  final int? themeColor;

  const UsersRow({
    required this.userId,
    this.fullName,
    this.avatarUrl,
    this.createdAt,
    this.themeMode,
    this.themeColor,
  });

  factory UsersRow.fromJson(Map<String, dynamic> json) {
    return UsersRow(
      userId: json[field.userId] as String,
      fullName: json[field.fullName],
      avatarUrl: json[field.avatarUrl],
      createdAt:
          json[field.createdAt] == null
              ? null
              : DateTime.tryParse(json[field.createdAt] ?? '')?.toLocal(),
      themeMode: json[field.themeMode],
      themeColor:
          json[field.themeColor] == null
              ? null
              : (json[field.themeColor] as num?)?.toInt(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      field.userId: userId,
      field.fullName: fullName,
      field.avatarUrl: avatarUrl,
      field.createdAt: createdAt?.toUtc().toIso8601String(),
      field.themeMode: themeMode,
      field.themeColor: themeColor,
    };
  }

  UsersRow copyWith({
    String? userId,
    String? fullName,
    String? avatarUrl,
    DateTime? createdAt,
    dynamic themeMode,
    int? themeColor,
  }) {
    return UsersRow(
      userId: userId ?? this.userId,
      fullName: fullName ?? this.fullName,
      avatarUrl: avatarUrl ?? this.avatarUrl,
      createdAt: createdAt ?? this.createdAt,
      themeMode: themeMode ?? this.themeMode,
      themeColor: themeColor ?? this.themeColor,
    );
  }

  /// Creates a new row in the database.
  ///
  /// Only non-null fields will be included in the insert payload.
  /// Primary keys and auto-generated fields can be set manually or left null for database defaults.
  /// Returns the created row with any auto-generated values.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<UsersRow> create({
    String? userId,
    String? fullName,
    String? avatarUrl,
    DateTime? createdAt,
    dynamic themeMode,
    int? themeColor,
  }) async {
    // Build the insert payload with only non-null fields using collection if
    final Map<String, dynamic> insertPayload = {
      if (userId != null) field.userId: userId,
      if (fullName != null) field.fullName: fullName,
      if (avatarUrl != null) field.avatarUrl: avatarUrl,
      if (createdAt != null)
        field.createdAt: createdAt.toUtc().toIso8601String(),
      if (themeMode != null) field.themeMode: themeMode,
      if (themeColor != null) field.themeColor: themeColor,
    };

    final response =
        await Supabase.instance.client
            .from(table)
            .insert(insertPayload)
            .select()
            .single();
    return UsersRow.fromJson(response);
  }

  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<UsersRow> getFromUserId(String userId) async {
    final response =
        await Supabase.instance.client
            .from(table)
            .select()
            .eq(field.userId, userId)
            .single();
    return UsersRow.fromJson(response);
  }
}
