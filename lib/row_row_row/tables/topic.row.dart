// Generated by row_row_row tool
// Auto-generated file. Do not modify.
import 'package:supabase_flutter/supabase_flutter.dart';

class TopicRow {
  static const table = 'topic';

  static const field = (
    topicId: 'topic_id',
    topicName: 'topic_name',
    topicImage: 'topic_image',
  );

  final int topicId;
  final String topicName;
  final String? topicImage;

  const TopicRow({
    required this.topicId,
    required this.topicName,
    this.topicImage,
  });

  factory TopicRow.fromJson(Map<String, dynamic> json) {
    return TopicRow(
      topicId: (json[field.topicId] as num).toInt(),
      topicName: json[field.topicName] as String,
      topicImage: json[field.topicImage],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      field.topicId: topicId,
      field.topicName: topicName,
      field.topicImage: topicImage,
    };
  }

  TopicRow copyWith({int? topicId, String? topicName, String? topicImage}) {
    return TopicRow(
      topicId: topicId ?? this.topicId,
      topicName: topicName ?? this.topicName,
      topicImage: topicImage ?? this.topicImage,
    );
  }

  /// Creates a new row in the database.
  ///
  /// Only non-null fields will be included in the insert payload.
  /// Primary keys and auto-generated fields can be set manually or left null for database defaults.
  /// Returns the created row with any auto-generated values.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<TopicRow> create({
    int? topicId,
    String? topicName,
    String? topicImage,
  }) async {
    // Build the insert payload with only non-null fields using collection if
    final Map<String, dynamic> insertPayload = {
      if (topicId != null) field.topicId: topicId,
      if (topicName != null) field.topicName: topicName,
      if (topicImage != null) field.topicImage: topicImage,
    };

    final response =
        await Supabase.instance.client
            .from(table)
            .insert(insertPayload)
            .select()
            .single();
    return TopicRow.fromJson(response);
  }

  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<TopicRow> getFromTopicId(int topicId) async {
    final response =
        await Supabase.instance.client
            .from(table)
            .select()
            .eq(field.topicId, topicId)
            .single();
    return TopicRow.fromJson(response);
  }
}
