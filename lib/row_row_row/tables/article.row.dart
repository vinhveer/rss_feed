// Generated by row_row_row tool
// Auto-generated file. Do not modify.
import 'package:supabase_flutter/supabase_flutter.dart';

class ArticleRow {
  static const table = 'article';

  static const field = (
    articleId: 'article_id',
    title: 'title',
    link: 'link',
    imageUrl: 'image_url',
    description: 'description',
    pubDate: 'pub_date',
    rssId: 'rss_id',
    linkArticleMd5: 'link_article_md5',
  );

  final int articleId;
  final String title;
  final String? link;
  final String? imageUrl;
  final String? description;
  final DateTime? pubDate;
  final int? rssId;
  final String linkArticleMd5;

  const ArticleRow({
    required this.articleId,
    required this.title,
    this.link,
    this.imageUrl,
    this.description,
    this.pubDate,
    this.rssId,
    required this.linkArticleMd5,
  });

  factory ArticleRow.fromJson(Map<String, dynamic> json) {
    return ArticleRow(
      articleId: (json[field.articleId] as num).toInt(),
      title: json[field.title] as String,
      link: json[field.link],
      imageUrl: json[field.imageUrl],
      description: json[field.description],
      pubDate:
          json[field.pubDate] == null
              ? null
              : DateTime.tryParse(json[field.pubDate] ?? '')?.toLocal(),
      rssId:
          json[field.rssId] == null
              ? null
              : (json[field.rssId] as num?)?.toInt(),
      linkArticleMd5: json[field.linkArticleMd5] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      field.articleId: articleId,
      field.title: title,
      field.link: link,
      field.imageUrl: imageUrl,
      field.description: description,
      field.pubDate: pubDate?.toUtc().toIso8601String(),
      field.rssId: rssId,
      field.linkArticleMd5: linkArticleMd5,
    };
  }

  ArticleRow copyWith({
    int? articleId,
    String? title,
    String? link,
    String? imageUrl,
    String? description,
    DateTime? pubDate,
    int? rssId,
    String? linkArticleMd5,
  }) {
    return ArticleRow(
      articleId: articleId ?? this.articleId,
      title: title ?? this.title,
      link: link ?? this.link,
      imageUrl: imageUrl ?? this.imageUrl,
      description: description ?? this.description,
      pubDate: pubDate ?? this.pubDate,
      rssId: rssId ?? this.rssId,
      linkArticleMd5: linkArticleMd5 ?? this.linkArticleMd5,
    );
  }

  /// Creates a new row in the database.
  ///
  /// Only non-null fields will be included in the insert payload.
  /// Primary keys and auto-generated fields can be set manually or left null for database defaults.
  /// Returns the created row with any auto-generated values.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<ArticleRow> create({
    int? articleId,
    String? title,
    String? link,
    String? imageUrl,
    String? description,
    DateTime? pubDate,
    int? rssId,
    String? linkArticleMd5,
  }) async {
    // Build the insert payload with only non-null fields using collection if
    final Map<String, dynamic> insertPayload = {
      if (articleId != null) field.articleId: articleId,
      if (title != null) field.title: title,
      if (link != null) field.link: link,
      if (imageUrl != null) field.imageUrl: imageUrl,
      if (description != null) field.description: description,
      if (pubDate != null) field.pubDate: pubDate.toUtc().toIso8601String(),
      if (rssId != null) field.rssId: rssId,
      if (linkArticleMd5 != null) field.linkArticleMd5: linkArticleMd5,
    };

    final response =
        await Supabase.instance.client
            .from(table)
            .insert(insertPayload)
            .select()
            .single();
    return ArticleRow.fromJson(response);
  }

  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<ArticleRow> getFromArticleId(int articleId) async {
    final response =
        await Supabase.instance.client
            .from(table)
            .select()
            .eq(field.articleId, articleId)
            .single();
    return ArticleRow.fromJson(response);
  }
}
