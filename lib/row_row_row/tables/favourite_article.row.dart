// Generated by row_row_row tool
// Auto-generated file. Do not modify.
import 'package:supabase_flutter/supabase_flutter.dart';

class FavouriteArticleRow {
  static const table = 'favourite_article';

  static const field = (articleId: 'article_id', userId: 'user_id');

  final int articleId;
  final String userId;

  const FavouriteArticleRow({required this.articleId, required this.userId});

  factory FavouriteArticleRow.fromJson(Map<String, dynamic> json) {
    return FavouriteArticleRow(
      articleId: (json[field.articleId] as num).toInt(),
      userId: json[field.userId] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {field.articleId: articleId, field.userId: userId};
  }

  FavouriteArticleRow copyWith({int? articleId, String? userId}) {
    return FavouriteArticleRow(
      articleId: articleId ?? this.articleId,
      userId: userId ?? this.userId,
    );
  }

  /// Creates a new row in the database.
  ///
  /// Only non-null fields will be included in the insert payload.
  /// Primary keys and auto-generated fields can be set manually or left null for database defaults.
  /// Returns the created row with any auto-generated values.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<FavouriteArticleRow> create({
    int? articleId,
    String? userId,
  }) async {
    // Build the insert payload with only non-null fields using collection if
    final Map<String, dynamic> insertPayload = {
      if (articleId != null) field.articleId: articleId,
      if (userId != null) field.userId: userId,
    };

    final response =
        await Supabase.instance.client
            .from(table)
            .insert(insertPayload)
            .select()
            .single();
    return FavouriteArticleRow.fromJson(response);
  }

  /// Fetches a single row from the database by its primary key.
  ///
  /// Returns the row if found, or throws an error if not found.
  ///
  /// Requires [supabase_flutter] package to be installed and initialized.
  static Future<FavouriteArticleRow> getFromArticleIdUserId(
    int articleId,
    String userId,
  ) async {
    final response =
        await Supabase.instance.client
            .from(table)
            .select()
            .eq(field.articleId, articleId)
            .eq(field.userId, userId)
            .single();
    return FavouriteArticleRow.fromJson(response);
  }
}
